TODO:

Features:
* Editing properties - monthly accounts


Stories:
x display current Monthly Accounts
x accounts are displayed in order
x add & remove accounts
* change order of accounts
x edit existing rules (add, remove, modify)
x validation
	x account can't be blank
	x no "wholes" in the sequence
- (override & ignore rules) sort by any column (UI only)

Tasks:
- Test in Rule Model (Config)
- Test in Rule Tester (Interactor)
- Test in UI (table model)


Later:
- MonthlyAccTableModel tests: remove duplication in assertions
- MonthtlyAccTableModel shouldn't have to know that acc sequence numbers are not zero-based
- clean up fireTableDataChanged duplication (code & tests)
- EditableMatchingRule: remove and collapse into MatchingRule (?)
- rename AccOverrideRulesTableModel -> it's not just for AccOverride
- fix conceptual duplication in displays_rules in PropertyEditorPresenterTests - also in other tests that need to build allRules with the correct number of objects
- PropEditorPresenter.editProperties also has the same problem -> smell: type code (RuleCategory enum)
	- duplication all over around "ignore", "acc-override" (presenter, interactor, tests,....) -> Replace Type Code With Class refactoring
- Map<String, Object>: consider base class for the Values (?)
- duplication in Config object & tests re:keys in map, types of objects in lists, etc
   => adding a value to RuleCategory causes shotgun surgery in copyTo, replaceWith -> similar actions for each element
      => perhaps refactor to Memento (??) 
- push up COLUMN_CLASSES from table model classes

General improvements:
- Table Models have to edit the supplied lists "in place", or they won't be saved (i.e. all the lists are shared objects -- See MonthlyAccTable Model to see the issue this causes)
- LocalFileTxImportModel could be implemented using the State Pattern 
- better handle the two states of the model class, depending on which file has been loaded first
- check that Target Account & Source accounts are different
- GncFile.addTransaction: validate source/target account are valid IDs (exist in file) 
- Change the UI to a wizard (with steps) 
- Presenter exception handling tests: find a way to generalize the test (using reflection?)
- Smells around TransactionRule.textForPossitiveMatch()

==================
DONE:
- Presenter to set the default target account in TxData instead of the view
- Presenter to set the default source account ID
- Model.saveTxTo: the filename should be the output file name, instead of a hard-coded value 
   -> change after implementing the openopenGncFile function (!!)
- BUG: changing the Target Account doesn't change the Accounts attached to the TxData objects !!
- select current account when displaying the target account pop-up (currently shows the last selected item)
- can source and target be set in any order? => YES
- expose Swing names as constants in the View/Presenter class
- GncFile.findAccountByName: what if names are not unique? => no an issue. it will return the first.
- What if the model can't find the default source/target accounts in the gnc file?
- Update Tx Count after filtering
- gnc::Account class leaks outside the Model - use AccountData instead?
- (PARTIAL) Resolve temporal coupling in loading the input files through enable/disable controls in the UI
- remove findEquivalentInList and replace with findAccountUnderTargetHierarchy (may simplify the temporal coupling problem!)
- create build & test script  
- replace assertNull() with harmcrest nullValue();
- getClass().getResource("../data/checkbook.xml").getPath() -> duplicated a lot => introduce helper TestData class w/static file(name) function 
- App automatically recognizes transactions by description and assigns them to a category
- I can import two files in a row
- matching rules to ignore transactions
- handle double-click(?) and ESC in the acc tree dialog  
- App remembers location of files
- add more e-to-e tests for all other high-level features
- (DECIDED NOT TO) script the generation of the jar app 
- generate monthly account hierarchy (from menu option?)
- Editing properties - ignore rules
- Editing properties - override rules (account & transaction description)

